---
import Layout from '../layouts/Layout.astro';
import { Database } from '../lib/database';

let config = await Database.getConfig();

// Ensure we have 10 teams
if (config.teams.length === 0) {
  config.teams = Array.from({ length: 10 }, (_, i) => ({
    id: `team-${i + 1}`,
    name: `Team ${i + 1}`,
    logoUrl: '',
    logoType: 'url' as const,
  }));
}
---

<Layout title="Configuration - Dynasty Draft Lottery">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="mb-8">
      <h2 class="text-3xl font-bold text-amber-500 mb-2">Configuration</h2>
      <p class="text-gray-400">Configure your draft lottery settings and teams</p>
    </div>

    <form id="config-form" class="space-y-8">
      <!-- League Settings -->
      <div class="bg-gray-900 rounded-lg p-6 border border-gray-800">
        <h3 class="text-xl font-semibold mb-4 text-amber-400">League Settings</h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <label for="numberOfTeams" class="block text-sm font-medium text-gray-300 mb-2">
              Number of Teams
            </label>
            <input
              type="number"
              id="numberOfTeams"
              name="numberOfTeams"
              value={config.numberOfTeams}
              min="2"
              max="20"
              class="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
              readonly
            />
            <p class="text-xs text-gray-500 mt-1">Fixed at 10 teams</p>
          </div>

          <div>
            <label for="numberOfRounds" class="block text-sm font-medium text-gray-300 mb-2">
              Number of Rounds
            </label>
            <input
              type="number"
              id="numberOfRounds"
              name="numberOfRounds"
              value={config.numberOfRounds}
              min="1"
              max="10"
              class="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label for="pickDelaySeconds" class="block text-sm font-medium text-gray-300 mb-2">
              Pick Delay (seconds)
            </label>
            <input
              type="number"
              id="pickDelaySeconds"
              name="pickDelaySeconds"
              value={config.pickDelaySeconds}
              min="1"
              max="30"
              step="0.5"
              class="w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      <!-- Teams Configuration -->
      <div class="bg-gray-900 rounded-lg p-6 border border-gray-800">
        <h3 class="text-xl font-semibold mb-4 text-amber-400">Teams</h3>
        <div class="space-y-4" id="teams-container">
          {
            config.teams.map((team, index) => (
              <div class="bg-gray-800 rounded-lg p-4 border border-gray-700">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label
                      for={`team-${index}-name`}
                      class="block text-sm font-medium text-gray-300 mb-2"
                    >
                      Team {index + 1} Name
                    </label>
                    <input
                      type="text"
                      id={`team-${index}-name`}
                      data-team-index={index}
                      data-field="name"
                      value={team.name}
                      class="team-field w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label
                      for={`team-${index}-logo-type`}
                      class="block text-sm font-medium text-gray-300 mb-2"
                    >
                      Logo Type
                    </label>
                    <select
                      id={`team-${index}-logo-type`}
                      data-team-index={index}
                      data-field="logoType"
                      class="team-field w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="url" selected={team.logoType === 'url'}>
                        URL
                      </option>
                      <option value="upload" selected={team.logoType === 'upload'}>
                        Upload
                      </option>
                    </select>
                  </div>

                  <div>
                    <label
                      for={`team-${index}-logo`}
                      class="block text-sm font-medium text-gray-300 mb-2"
                    >
                      Logo URL
                    </label>
                    <input
                      type="text"
                      id={`team-${index}-logo`}
                      data-team-index={index}
                      data-field="logoUrl"
                      value={team.logoUrl}
                      placeholder="https://example.com/logo.png"
                      class="team-field w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <!-- Weighted Odds System -->
      <div class="bg-gray-900 rounded-lg p-6 border border-gray-800">
        <h3 class="text-xl font-semibold mb-4 text-amber-400">Weighted Odds System</h3>
        <p class="text-sm text-gray-400 mb-4">
          Percentage odds for each position (Position 10 = Worst Team, Position 1 = Champion)
        </p>
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
          {
            config.weightedSystem.map((odds) => (
              <div>
                <label
                  for={`odds-${odds.position}`}
                  class="block text-sm font-medium text-gray-300 mb-2"
                >
                  Position {odds.position}
                </label>
                <div class="relative">
                  <input
                    type="number"
                    id={`odds-${odds.position}`}
                    data-position={odds.position}
                    value={odds.percentage}
                    min="0"
                    max="100"
                    step="0.1"
                    class="odds-field w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <span class="absolute right-3 top-2 text-gray-500">%</span>
                </div>
              </div>
            ))
          }
        </div>
        <div class="mt-4">
          <p class="text-sm text-gray-400">
            Total: <span id="odds-total" class="font-semibold text-amber-400">100.0</span>%
          </p>
        </div>
      </div>

      <!-- Save Button -->
      <div class="flex justify-end">
        <button
          type="submit"
          class="px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white font-medium rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900"
        >
          Save Configuration
        </button>
      </div>
    </form>

    <div
      id="notification"
      class="hidden fixed bottom-4 right-4 px-6 py-3 rounded-md shadow-lg transition-opacity"
    >
    </div>
  </div>

  <script>
    // Configuration state
    let config = {
      numberOfTeams: 10,
      numberOfRounds: 5,
      teams: [] as any[],
      weightedSystem: [] as any[],
      pickDelaySeconds: 3,
      currentYear: new Date().getFullYear(),
    };

    // Load initial config
    async function loadConfig() {
      try {
        const response = await fetch('/api/config');
        config = await response.json();
      } catch (error) {
        console.error('Failed to load config:', error);
      }
    }

    // Update odds total
    function updateOddsTotal() {
      const oddsFields = document.querySelectorAll('.odds-field') as NodeListOf<HTMLInputElement>;
      let total = 0;
      oddsFields.forEach((field) => {
        total += parseFloat(field.value) || 0;
      });
      const totalElement = document.getElementById('odds-total');
      if (totalElement) {
        totalElement.textContent = total.toFixed(1);
        totalElement.className =
          total === 100
            ? 'font-semibold text-green-400'
            : 'font-semibold text-yellow-400';
      }
    }

    // Show notification
    function showNotification(message: string, type: 'success' | 'error') {
      const notification = document.getElementById('notification');
      if (notification) {
        notification.textContent = message;
        notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-md shadow-lg ${
          type === 'success' ? 'bg-green-600' : 'bg-red-600'
        } text-white`;
        notification.classList.remove('hidden');

        setTimeout(() => {
          notification.classList.add('hidden');
        }, 3000);
      }
    }

    // Handle form submission
    async function handleSubmit(e: Event) {
      e.preventDefault();

      // Gather form data
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);

      config.numberOfRounds = parseInt(formData.get('numberOfRounds') as string);
      config.pickDelaySeconds = parseFloat(formData.get('pickDelaySeconds') as string);

      // Gather team data
      const teamFields = document.querySelectorAll('.team-field') as NodeListOf<HTMLInputElement>;
      const teams = new Map();

      teamFields.forEach((field) => {
        const index = parseInt(field.dataset.teamIndex || '0');
        const fieldName = field.dataset.field || '';

        if (!teams.has(index)) {
          teams.set(index, {
            id: config.teams[index]?.id || `team-${index + 1}`,
            name: '',
            logoUrl: '',
            logoType: 'url',
          });
        }

        const team = teams.get(index);
        if (field instanceof HTMLSelectElement) {
          team[fieldName] = field.value;
        } else {
          team[fieldName] = field.value;
        }
      });

      config.teams = Array.from(teams.values());

      // Gather weighted odds
      const oddsFields = document.querySelectorAll('.odds-field') as NodeListOf<HTMLInputElement>;
      config.weightedSystem = Array.from(oddsFields).map((field) => ({
        position: parseInt(field.dataset.position || '1'),
        percentage: parseFloat(field.value),
      }));

      // Validate odds total
      const total = config.weightedSystem.reduce((sum, odds) => sum + odds.percentage, 0);
      if (Math.abs(total - 100) > 0.1) {
        showNotification('Weighted odds must total 100%', 'error');
        return;
      }

      // Save config
      try {
        const response = await fetch('/api/config', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(config),
        });

        if (response.ok) {
          showNotification('Configuration saved successfully!', 'success');
        } else {
          showNotification('Failed to save configuration', 'error');
        }
      } catch (error) {
        showNotification('Failed to save configuration', 'error');
      }
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      loadConfig();

      const form = document.getElementById('config-form');
      if (form) {
        form.addEventListener('submit', handleSubmit);
      }

      const oddsFields = document.querySelectorAll('.odds-field');
      oddsFields.forEach((field) => {
        field.addEventListener('input', updateOddsTotal);
      });

      updateOddsTotal();
    });
  </script>
</Layout>
